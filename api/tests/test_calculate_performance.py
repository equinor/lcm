import unittest
from typing import List

from calculators.bridge import theoretical_bridge
from calculators.optimizer import Optimizer
from classes.product import Product
from tests.optimizer_test import product_data
from util.enums import BridgeOption

products_result: List[Product] = []
volume = 10
combination = {"1b": 10, "1l": 20, "1s": 1}
for p in product_data:
    if p["id"] in combination:
        products_result.append(
            Product(
                product_id=p["id"],
                share=(combination[p["id"]] / sum(combination.values())) * 100,
                cumulative=p["cumulative"],
                sacks=combination[p["id"]],
                mass=(combination[p["id"]] * volume),
            )
        )


class CalcPerfTest(unittest.TestCase):
    @staticmethod
    def test_calculate_performance_normal_values():
        experimental_bridge = [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.009285714285714286,
            0.03285714285714286,
            0.15642857142857144,
            0.47235714285714286,
            0.9794285714285714,
            1.625857142857143,
            2.3253571428571433,
            3.0238571428571435,
            3.7215000000000003,
            4.456714285714286,
            5.290285714285714,
            6.270071428571429,
            7.422285714285714,
            8.748,
            10.240142857142859,
            11.903642857142856,
            13.734857142857145,
            15.728142857142858,
            17.8685,
            20.133357142857147,
            22.502499999999998,
            24.9545,
            27.478357142857142,
            30.059285714285714,
            32.70528571428572,
            35.417642857142866,
            38.206714285714284,
            41.09214285714286,
            44.10049999999999,
            47.26971428571427,
            50.63585714285714,
            54.247928571428574,
            58.13192857142858,
            62.28471428571429,
            66.65507142857143,
            71.11764285714285,
            75.48807142857142,
            79.53007142857142,
            83.05835714285715,
            85.92385714285714,
            88.05585714285715,
            89.70292857142857,
            91.11307142857142,
            92.30685714285715,
            93.41014285714284,
            94.41485714285716,
            95.31214285714287,
            96.10271428571428,
            96.79014285714285,
            97.3795,
            97.87485714285714,
            98.29599999999999,
            98.65050000000001,
            98.94685714285716,
            99.19264285714286,
            99.39528571428572,
            99.56164285714286,
            99.69457142857144,
            99.79835714285714,
            99.87564285714286,
            99.93264285714285,
            99.9715,
            99.99249999999999,
            99.99828571428571,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
        ]
        density_goal = 100
        products_goal = 5
        particle_range = (1.01, 100.0)
        performance = Optimizer(
            bridge=theoretical_bridge(BridgeOption.PERMEABILITY, 500),
            max_products=products_goal,
            density_goal=density_goal,
            particle_range=particle_range,
        ).calculate_performance(experimental_bridge, products_result)
        print(performance)

    @staticmethod
    def test_calculate_performance_tripple_values():
        experimental_bridge = [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.009285714285714286,
            0.03285714285714286,
            0.15642857142857144,
            0.47235714285714286,
            0.9794285714285714,
            1.625857142857143,
            2.3253571428571433,
            3.0238571428571435,
            3.7215000000000003,
            4.456714285714286,
            5.290285714285714,
            6.270071428571429,
            7.422285714285714,
            8.748,
            10.240142857142859,
            11.903642857142856,
            13.734857142857145,
            15.728142857142858,
            17.8685,
            20.133357142857147,
            22.502499999999998,
            24.9545,
            27.478357142857142,
            30.059285714285714,
            32.70528571428572,
            35.417642857142866,
            38.206714285714284,
            41.09214285714286,
            44.10049999999999,
            47.26971428571427,
            50.63585714285714,
            54.247928571428574,
            58.13192857142858,
            62.28471428571429,
            66.65507142857143,
            71.11764285714285,
            75.48807142857142,
            79.53007142857142,
            83.05835714285715,
            85.92385714285714,
            88.05585714285715,
            89.70292857142857,
            91.11307142857142,
            92.30685714285715,
            93.41014285714284,
            94.41485714285716,
            95.31214285714287,
            96.10271428571428,
            96.79014285714285,
            97.3795,
            97.87485714285714,
            98.29599999999999,
            98.65050000000001,
            98.94685714285716,
            99.19264285714286,
            99.39528571428572,
            99.56164285714286,
            99.69457142857144,
            99.79835714285714,
            99.87564285714286,
            99.93264285714285,
            99.9715,
            99.99249999999999,
            99.99828571428571,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
        ]
        density_goal = 100
        products_goal = 5
        particle_range = (1.01, 100.0)
        performance = Optimizer(
            bridge=theoretical_bridge(BridgeOption.PERMEABILITY, 500),
            max_products=products_goal,
            density_goal=density_goal,
            particle_range=particle_range,
        ).calculate_performance(experimental_bridge, products_result)
        print(performance)

    def test_calculate_performance_zero_values(self):
        experimental_bridge = [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.009285714285714286,
            0.03285714285714286,
            0.15642857142857144,
            0.47235714285714286,
            0.9794285714285714,
            1.625857142857143,
            2.3253571428571433,
            3.0238571428571435,
            3.7215000000000003,
            4.456714285714286,
            5.290285714285714,
            6.270071428571429,
            7.422285714285714,
            8.748,
            10.240142857142859,
            11.903642857142856,
            13.734857142857145,
            15.728142857142858,
            17.8685,
            20.133357142857147,
            22.502499999999998,
            24.9545,
            27.478357142857142,
            30.059285714285714,
            32.70528571428572,
            35.417642857142866,
            38.206714285714284,
            41.09214285714286,
            44.10049999999999,
            47.26971428571427,
            50.63585714285714,
            54.247928571428574,
            58.13192857142858,
            62.28471428571429,
            66.65507142857143,
            71.11764285714285,
            75.48807142857142,
            79.53007142857142,
            83.05835714285715,
            85.92385714285714,
            88.05585714285715,
            89.70292857142857,
            91.11307142857142,
            92.30685714285715,
            93.41014285714284,
            94.41485714285716,
            95.31214285714287,
            96.10271428571428,
            96.79014285714285,
            97.3795,
            97.87485714285714,
            98.29599999999999,
            98.65050000000001,
            98.94685714285716,
            99.19264285714286,
            99.39528571428572,
            99.56164285714286,
            99.69457142857144,
            99.79835714285714,
            99.87564285714286,
            99.93264285714285,
            99.9715,
            99.99249999999999,
            99.99828571428571,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
            99.99892857142858,
        ]
        density_goal = 100
        products_goal = 5
        particle_range = (1.01, 100.0)

        performance = Optimizer(
            bridge=theoretical_bridge(BridgeOption.PERMEABILITY, 500),
            max_products=products_goal,
            density_goal=density_goal,
            particle_range=particle_range,
        ).calculate_performance(experimental_bridge, products_result)
        print(performance)

    @staticmethod
    def test_calculate_performance_perfect_bridge():
        density_goal = 100
        products_goal = 5
        particle_range = (1.01, 100.0)
        performance = Optimizer(
            bridge=theoretical_bridge(BridgeOption.PERMEABILITY, 500),
            max_products=products_goal,
            density_goal=density_goal,
            particle_range=particle_range,
        ).calculate_performance(theoretical_bridge(BridgeOption.PERMEABILITY, 500), products_result)
        print(performance)
